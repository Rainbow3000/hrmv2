// <auto-generated />
using System;
using HRM.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRM.Infrastructure.Migrations
{
    [DbContext(typeof(MySQLDBContext))]
    partial class MySQLDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entity.AllowanceSalaryEntity", b =>
                {
                    b.Property<Guid>("AllowanceSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AllowanceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AllowanceSalaryId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("AllowanceSalary");
                });

            modelBuilder.Entity("Core.Entity.DeductibleSalaryEntity", b =>
                {
                    b.Property<Guid>("DeductibleSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeductibleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DeductibleSalaryId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("DeductibleSalary");
                });

            modelBuilder.Entity("Core.Entity.EducationEntity", b =>
                {
                    b.Property<Guid>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EducationPlace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FromYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GraduationYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ToYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EducationId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Core.Entity.EmployeeEntity", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Dob")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdentifyDateRange")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdentifyIssuedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdentifyNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdentifyType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrganEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TaxtCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TaxtCodeDateRange")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TaxtCodeIssuedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Core.Entity.ExperienceEntity", b =>
                {
                    b.Property<Guid>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ComparePerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FromDay")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsCheckedCompare")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ToDay")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WorkPlace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WorkPosition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ExperienceId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Core.Entity.FileEntity", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UploadDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FileId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Core.Entity.HometownEntity", b =>
                {
                    b.Property<Guid>("HometownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Wards")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("HometownId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Hometowns");
                });

            modelBuilder.Entity("Core.Entity.NowAddressEnity", b =>
                {
                    b.Property<Guid>("NowAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Wards")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("NowAddressId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("NowAddresses");
                });

            modelBuilder.Entity("Core.Entity.PermanentResidenceEntity", b =>
                {
                    b.Property<Guid>("PermanentResidenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Wards")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PermanentResidenceId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("PermanentResidences");
                });

            modelBuilder.Entity("Core.Entity.SalaryInfoEntity", b =>
                {
                    b.Property<Guid>("SalaryInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BasicSalary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("InsuranceSalary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LevelSalary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LrossSalary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NetSalary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TotalSalary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SalaryInfoId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("SalaryInfos");
                });

            modelBuilder.Entity("Core.Entity.UrgentContactEntity", b =>
                {
                    b.Property<Guid>("UrgentContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Relational")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UrgentContactId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("UrgentContacts");
                });

            modelBuilder.Entity("Core.Entity.WorkInfoEntity", b =>
                {
                    b.Property<Guid>("WorkInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("GoogleCalendarId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsExemptTimeKeeper")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimeKeeperCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WorkType")
                        .HasColumnType("int");

                    b.Property<string>("managerId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("WorkInfoId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("WorkInfos");
                });

            modelBuilder.Entity("Core.Entity.AllowanceSalaryEntity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("AllowanceSalary")
                        .HasForeignKey("Core.Entity.AllowanceSalaryEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.DeductibleSalaryEntity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("DeductibleSalary")
                        .HasForeignKey("Core.Entity.DeductibleSalaryEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.EducationEntity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("Education")
                        .HasForeignKey("Core.Entity.EducationEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.ExperienceEntity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("Experience")
                        .HasForeignKey("Core.Entity.ExperienceEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.FileEntity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("File")
                        .HasForeignKey("Core.Entity.FileEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.HometownEntity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("Hometown")
                        .HasForeignKey("Core.Entity.HometownEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.NowAddressEnity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("NowAddress")
                        .HasForeignKey("Core.Entity.NowAddressEnity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.PermanentResidenceEntity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("PermanentResidence")
                        .HasForeignKey("Core.Entity.PermanentResidenceEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.SalaryInfoEntity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("SalaryInfo")
                        .HasForeignKey("Core.Entity.SalaryInfoEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.UrgentContactEntity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("UrgentContact")
                        .HasForeignKey("Core.Entity.UrgentContactEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.WorkInfoEntity", b =>
                {
                    b.HasOne("Core.Entity.EmployeeEntity", "Employee")
                        .WithOne("WorkInfo")
                        .HasForeignKey("Core.Entity.WorkInfoEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entity.EmployeeEntity", b =>
                {
                    b.Navigation("AllowanceSalary")
                        .IsRequired();

                    b.Navigation("DeductibleSalary")
                        .IsRequired();

                    b.Navigation("Education")
                        .IsRequired();

                    b.Navigation("Experience")
                        .IsRequired();

                    b.Navigation("File")
                        .IsRequired();

                    b.Navigation("Hometown")
                        .IsRequired();

                    b.Navigation("NowAddress")
                        .IsRequired();

                    b.Navigation("PermanentResidence")
                        .IsRequired();

                    b.Navigation("SalaryInfo")
                        .IsRequired();

                    b.Navigation("UrgentContact")
                        .IsRequired();

                    b.Navigation("WorkInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
